                                ~~~~~~~~~~~MODIFYING STATS~~~~~~~~~~~~~~

Throughout the game, stats can grow/deplete either by run progression 
    (leveling up, doing activities that buff stat & aptitutude values),
    buffs/debuffs (from battle or events), weapons, & meta progression (relics, achievements)

This calls for a modular system where entities can recieve different effects and have their stats 
updated accordingly, while also reverting stat changes when effects have expired. The systems
needs to keep in mind that stats can be permenantly altered as well.

How should the stat growth, ailments, and aptitude work together?

NEW:
Apt mults base val, reduces shrink, alteration only effect active val:

    GROWTH from Activities:
        Pos Apt:
            str 4 at val 50, active val is 100
            + 10 str growth
            val = 60, active = 120
        Neg Apt:
            str -4 at val 100, active val is 50
            + 10 growth
            val = 110, active = 55
    
    SHRINK from Activities:
        Pos Apt:
            str 4 at val 50, active val is 100
            -10 str shrink, divided by 2 = -5 (communicated to player)
            val = 45, active = 90
        Neg Apt:
            str -4, at val 100, active val is 50
            -10 growth
            val = 90, active = 45

    
    ALTERATIONS
    -10% str alteration (only divided by Hunger Apt)
    active = 90
    
    +10% str ailment (only mult by Hunger Apt)
    active = 110

TESTING:
Merging aptitude modifier with buff mult
    str at apt 4, val 50
    apt val 4 = x2 modifier
    +10% alteration = x1.1 modifier
    total modifier = 2 * 1.1 = 2.2
    active val= 50 * 2.1 = 110

Merging with debuff mult:
    str at apt 4, val 50
    apt val 4 = x2 modifier
    -10% alteration = x0.9 modifier
    total = x1.8
    active val = 50 * 1.8 = 90
    

                                                APT GROWTH:
Max points required to change level = 40

https://www.desmos.com/calculator/4eoktr5zde

f(x) = {x > 0 : -(1/0.8)|x| + 10 else -2.5|x| + 10}
x = apt val
f(x) equals devisior of max points required to level
final value to get from one apt val to another = 40 / f(x)
exception: if f(x) = 0 then skip division

---------------------------------Buffs, Debuffs, & Status Effects ---------------------------------

                            ~~~PROPERTIES & PROBLEMS TO SOLVE~~~
>duration - how long the effect lasts 
    (for... days, minutes, rounds, turns, moves/actions, ever, 
    afflictor's lifetime, another entity's lifetime)
>stat effects - what stat is affected, by how much. 
    -Should alterations effect:
        base stat number?
        CHOSEN: active stat value!
        stat aptitude?
        multiple of the options at once?
        any one of the options?
>special effects - is this effect more than a stat modifier? Perhaps damage is dealt over time,
    actions are limited, outgoing damage from any source is affected, movement is better/worse
    or works completely different, like sliding around; an entity has control of another's turn,
    can the effect spread and how? 
    -Could new actions be available?
    -Can the effect do multiple things? Like increase action amount AND provide a new ability?
    -Are the effected only related to battle? Or can they affect sleep or base upkeep or how deep
    in a dungeon the player can go? 
    -What if the effect modified what spawns on a floor?
>interactions - are some special effects incompatible with one another? An entity can't be both
    wet and on fire, so what should happen if both are applied to an entity?
    Perhaps wetness has a higher priority than fire and so fire gets dispelled. 
    -Could having mutiple ailments create or merge into a new ailment? 
>stat association - status effects should relate to a stat, like inflicting "hungry" would
    relate to the Hunger stat. The stat of the afflictor's effect should then compare to the
    victim's resistance stat to dictate how long it lasts and its efficiency.
>resistance - The Recovery stat is used to reduce the duration and efficiency of a status effect,
    while the Hunger stat is used to resist/boost similarly, but only to plain debuffs/buffs.
    -How should the resistance or boost work for effects where it isn't obvious,
    like an ailment that stops the use of all combat moves? Perhaps Recovery only affects the
    duration if the effect cant numerically be represented. Otherwise the effectiveness would have
    to be hardcoded. 
    -Other stats could reduce the effectiveness of an ailment too, such as ones that come 
    from excess Fear or Stress. Default stat would be Recovery however.
>afflictors - What can inflict ailments? Almost anything should or can.
    (Entities, traps, discussions, items like food, weapons, armor, throwables; events like
    reaching a certain day or completing a sucessful dungeon run;)
>removal - Ailments will mostly be removed by the duration completing, but what others ways
    could it be removed? How specific would it be? Some moves could cleanse ailments, but 
    other ailments might have more specific conditions for removal.
>triggers - what if an ailment does something when a condition is met? Could it have a condition and
    a passive effect too? What could cause the condition and how would it know when it is met?
    For example, when a specific floor is reached, or when enough enemies are killed.
>types - some status effects should be organized or tagged in different groups that can all 
    subscribe to a behavior. Groups can be physical, mental, stat only (debuffs/buffs), or elemental.
    A group behavior could be that all mental effects are destroyed for a damage burst when X happens.

                                    ~Undesired Features~
>rank - Status effects do not need a ranking as their effectiveness can either be an 
    entirely new named effect or the enemy can have a high stat associated with the effect's power

                                     ~~~Deep Dive~~~

                                 ~Stat Memory & Stat Effects~
When stats are changed temporarily, the changes need to be memorized to later be reversed while
keeping permanent changes untouched. Bring in the Stat Board to track both permanent and temporary
stats values of characters. The idea is that 2 dicts of Stat objs are stored, memorized & current
respectively. Any time a stat is permenantly altered, both are updated with the change. When a 
stat is temporarily altered, only the current type is updated. The current stats are the values 
to be read when necessary. Once a battle run is over, current stats revert to perm stats.

Perm Stats are changed by:
    Meta Progression
    Stat growth through activities
    Events
    Growth Modifier Effects 

    METHOD:
    When changed they immediately update current stats. 
    Meta progressions can charge the starting value of perm stats, or growth modifier.
    Events can perm alter stats.

    The shrinkage of an affected stat is reduced by positive Aptitudes.

Current Stats are changed by, in order:
    Perm stats updating

    Aptitude modifier
    Character Passives
    Equipment
    Relationship Passives
    Food
    Stat affecting Status Effects
    Alterations

    METHOD:
    Whenever one of these changes occur, the perm stat update MUST be calculated first
    Aptitude when >0 decreases shrinkage.

    UTILITIES:

        Turning a base number stat change into a multiplicative effect:

        EQUATION:
            number / base stat value + 1

        EXAMPLE:
            addition:
            +20 additional value, 50 base value
            20 / 50 = 0.4 + 1 = x1.4 modifier
            
            subtraction:
            -20 value, 50 base value
            -20 / 50 = -0.4 + 1 = x0.6 modifier

            big addition:
            +100 value, 50 base
            100 / 50 = 2 + 1 = x3 modifier


        Postive Aptitude Mult against decreasing Modifier:

            EQUATION:
            a = aptitude modifier - 1
            r = 1 - modifier to apply
            new modifier = 1-(r*a)

            EXAMPLE:
            4 apt, x0.9 mult:
            m = 0.9
            a = 1/2 = 0.5
            r = 1-0.9 = 0.1
            new modifier = 1-(0.1*0.5) = x0.95

        Negative Aptitude Mults against increasing Modifier:
            
            EQUATION:
            new modifier = 1 + ((1 - modifier mult) * apt mult)

            EXAMPLE:
            -4 apt, x1.1 mult:
            = 1 + ((1 - 1.1) * 0.5)
            = 1 + (0.1 * 0.5)
            = 1 + 0.05
            = 1.05 = new modifier

        Same Aptitude and Modifier combos:
            Apt mult * modifier mult 


    EXAMPLE:
    perm update
    str at apt 4, val 50

    apt modifier
    apt val 4 = x2 modifier

    Char passive (add stat to another)
    +20 additional value, 50/20 = 0.4 + 1 = x1.4 modifier
    2 * 1.4 = x2.8 total
    temp active val = 140 (50 * 2.8)

    Equipment
    x0.9 modifier, need to be reduced by apt
    m = 0.9
    a = 1/2 = 0.5
    r = 1-0.9 = 0.1
    new modifier = 1-(0.1*0.5) = x0.95
    total mult = 0.95*2.8 = 2.66
    
    Alteration
    +10% alteration = x1.1 modifier
    total mult = 1.1 * 2.66 = x2.926
    

                                       -Alterations-
Percentage changes of a stat are represented by <Alteration> classes, and are stored in
a list by a Character, where the list represents all alterations that are applied to a Character 
at one time. These changes manipulate the current stats dictionary and when an alteration expires, 
they're removed from the list and cur stats dict is updated through a new calculation
    EX: a list containing a debuff and buff relating to the Strength stat of 10:
        [0.9, 1.2] = 10-10%+20% = 10.8 rounded to 11
        This equates to 0.9 * 1.2 = 1.08 which is an 8% increase

                                        ~RULES~
        Alterations are only percentage based changes and effect active stat values
        Buffs & Debuffs of the same stat can coexist
        Debuffs or buffs of the same stat will have the higher potency effect takes priority
        If the potency is the same, the one with higher duration takes priority
        If the duration is the same, the duration is refreshed on the current alteration
        otherwise, the alteration is ignored
        HOWEVER
        If a higher potency alteration overrides a lower potency but higher duration alteration,
            when the more potent alteration expires, the less potent alteration will take its place



To Store all Alterations per stat

    Each stat has its own alterations to own
    <Stat> obj contains an alteration list which will also trigger the effect to the stat value
        while in the list

class Stat

    init 
        self.buffs = []
        self.debuffs = []
        self.modifier = 1

    // called everytime an high priority alteration is applied or removed from this stat
    def get_alteration_effect
        get highest priority debuff and buff on this stat
        multiply their percentages together
        decrease or increase modifiers based on Hunger Aptitiude
        apply to the modifier, which will help create the active val

    def sort lists ()
        for debuff and buff lists
            if none, or size = 1 return 
            if size > 1
                sort by higher potency, and then higher duration

    def calculate active val

                


class Alteration

    name - string title
    value - a float representing a percentage change (1.5 for +50%, 0.8 for -20%)
        Excludes 1
    duration - how long it lasts, trigger by <Time> class obj
    ef_stat - name of stat to effect

    def apply
        gets alteration list associated with this one's value (neg or pos) and stat it affects
        list should come prioritized by potency, duration

        for a in list

            if this potency > a potency and a is highest priority
                add to front of list
                trigger stat recalc
                break

            // 2nd entry and after
            if this potentency > a potency and this duration is more than previous alteration in list
                insert into list
                breal

            if this potency = a potency
                if duration is equal
                    reset its duration
                    alert: an alteration was reset
                    break
                if this duration >
                    replace a with this
                    break
            
            //this should only trigger at end of the list         
            if this potency < a potency and this duration >
                add to list
            
            


How the alteration remove itself from the Character's list when it expires:

The statboard class should check the alterations if they have expired and calls a removal
function to delete the alteration from the character's list and recalculate's their cur stats


                                        ~Time of Duration~
Describes what event the effect is looking for and for how many triggers.
